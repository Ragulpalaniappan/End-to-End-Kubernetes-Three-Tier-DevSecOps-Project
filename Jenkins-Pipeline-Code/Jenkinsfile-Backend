pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECRREPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/Ragulpalaniappan/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Backend \
                        -Dsonar.projectKey=Backend '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/backend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") 
        {
            steps 
            {
                script 
                {
                   withCredentials([aws(credentialsId: 'aws-key')]) 
                   {
                // Step 1: Login to ECR
                sh '''
                    echo "Logging in to ECR..."
                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                '''

                // Step 2: Tag Docker image with the build number
                sh '''
                    echo "Tagging Docker image..."
                    docker tag ${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                '''

                // Step 3: Push Docker image to ECR
                sh '''
                    echo "Pushing Docker image to ECR..."
                    docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                '''
                    }
               }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/Ragulpalaniappan/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "Ragulpalaniappan"
            }
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                       sh '''
    echo "Configuring Git..."
    git config user.email "ragulram1115@gmail.com"
    git config user.name "Ragulpalaniappan"
    
    echo "Extracting current image tag..."
    imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
    
    if [ -z "$imageTag" ]; then
        echo "Error: Could not extract image tag. Ensure 'backend:' exists in deployment.yaml."
        exit 1
    fi

    echo "Current image tag: $imageTag"
    echo "Updating deployment.yaml..."
    sed -i "s|backend:${imageTag}|backend:${BUILD_NUMBER}|" deployment.yaml

    echo "Committing changes..."
    git add deployment.yaml
    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
'''
                    }
                }
            }
        }
    }
}
